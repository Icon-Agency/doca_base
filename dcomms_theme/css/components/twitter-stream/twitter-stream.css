.clearfix:before,
.twitter-stream:before,
.layout-three-column:before,
.layout-max--sm-med-lrg:before,
.layout-max:before {
  content: '';
  display: table;
}
.clearfix:after,
.twitter-stream:after,
.layout-three-column:after,
.layout-max--sm-med-lrg:after,
.layout-max:after {
  content: '';
  display: table;
  clear: both;
}

.clearfix__overflow {
  display: block;
  overflow: hidden;
  width: 100%;
}

.twitter-stream,
.layout-three-column,
.layout-max--sm-med-lrg,
.layout-max {
  clear: both;
  max-width: 1280px;
  margin-left: auto;
  margin-right: auto;
}

.twitter-stream,
.layout-three-column,
.layout-max--sm-med-lrg {
  max-width: 360px;
}
@media (min-width: 720px) {
  .twitter-stream,
  .layout-three-column,
  .layout-max--sm-med-lrg {
    max-width: 720px;
  }
}
@media (min-width: 980px) {
  .twitter-stream,
  .layout-three-column,
  .layout-max--sm-med-lrg {
    max-width: 1280px;
  }
}

.twitter-stream,
.layout-three-column {
  overflow: hidden;
}

.layout-three-column__item {
  margin-bottom: 16px;
  margin-bottom: 1rem;
  clear: left;
}
@media (min-width: 720px) and (max-width: 980px) {
  .layout-three-column__item {
    width: 48.93617%;
    clear: right;
    float: left;
    margin-left: 0;
    margin-right: 2.12766%;
    clear: none;
  }
  .layout-three-column__item:nth-of-type(2n+2) {
    width: 48.93617%;
    clear: right;
    float: right;
    margin-right: 0;
  }
}
@media (min-width: 980px) {
  .layout-three-column__item {
    width: 31.91489%;
    clear: right;
    float: left;
    margin-left: 0;
    margin-right: 2.12766%;
  }
  .layout-three-column__item:nth-of-type(3n+3) {
    width: 31.91489%;
    clear: right;
    float: right;
    margin-right: 0;
  }
}
.layout-three-column__item p {
  margin-bottom: 0;
}

html {
  font-size: 100% !important;
}

.twitter-stream {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

.twitter-timeline {
  width: 100% !important;
  max-width: 100% !important;
  height: 540px;
}
@media (min-width: 480px) {
  .twitter-timeline {
    height: 540px;
  }
}
@media (min-width: 720px) {
  .twitter-timeline {
    height: 360px;
  }
}
@media (min-width: 980px) {
  .twitter-timeline {
    height: 180px;
  }
}
.twitter-timeline .timeline {
  max-width: 100% !important;
}

.stream .avatar {
  display: none;
}
.stream .header {
  padding-left: 0 !important;
}
.stream .tweet {
  margin-bottom: 16px;
  margin-bottom: 1rem;
  clear: left;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  padding: 0 !important;
  margin-bottom: 20px !important;
  position: relative !important;
  height: 160px;
}
@media (min-width: 670px) and (max-width: 980px) {
  .stream .tweet {
    width: 48.93617%;
    clear: right;
    float: left;
    margin-left: 0;
    margin-right: 2.12766%;
    clear: none;
  }
  .stream .tweet:nth-of-type(2n+2) {
    width: 48.93617%;
    clear: right;
    float: right;
    margin-right: 0;
  }
}
@media (min-width: 980px) {
  .stream .tweet {
    width: 31.91489%;
    clear: right;
    float: left;
    margin-left: 0;
    margin-right: 2.12766%;
  }
  .stream .tweet:nth-of-type(3n+3) {
    width: 31.91489%;
    clear: right;
    float: right;
    margin-right: 0;
  }
}
.stream .tweet p {
  margin-bottom: 0;
}
@media (min-width: 480px) {
  .stream .tweet {
    height: 160px;
  }
}
@media (min-width: 720px) {
  .stream .tweet {
    height: 160px;
  }
}
@media (min-width: 980px) {
  .stream .tweet {
    height: 160px;
  }
}
.stream .tweet .e-entry-title {
  font-weight: 300 !important;
  font-size: 16px !important;
  font-size: 1rem !important;
  line-height: 24px !important;
  line-height: 1.5rem !important;
}
.stream .tweet .inline-media {
  display: none !important;
}



/*# sourceMappingURL=data:application/json;base64, */
